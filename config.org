#+TITLE: Doom Config
#+auto_tangle: t

* Packages
#+begin_src emacs-lisp :tangle ~/.doom.d/packages.el :filename packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;(package! builtin-package :pin "1a2b3c4d5e")


;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;(unpin! pinned-package)
;; ...or multiple packages
;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;(unpin! t)
(package! dired+)
(package! rg)
#+end_src
* Init
#+begin_src emacs-lisp :tangle ~/.doom.d/init.el :filename init.el
  ;;; init.el -*- lexical-binding: t; -*-

  ;; This file controls what Doom modules are enabled and what order they load
  ;; in. Remember to run 'doom sync' after modifying it!

  ;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
  ;;      documentation. There you'll find a "Module Index" link where you'll find
  ;;      a comprehensive list of Doom's modules and what flags they support.

  ;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
  ;;      'C-c c k' for non-vim users) to view its documentation. This works on
  ;;      flags as well (those symbols that start with a plus).
  ;;
  ;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
  ;;      directory (for easy access to its source code).

  (doom!
     :completion
     company             ; the ultimate code completion backend
     vertico             ; the search engine of the future

     :ui
     doom                ; what makes DOOM look the way it does
     hl-todo             ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
     modeline            ; snazzy, Atom-inspired modeline, plus API
     (popup +defaults)   ; tame sudden yet inevitable temporary windows
     workspaces          ; tab emulation, persistence & separate workspaces

     :editor

     (evil +everywhere)  ; come to the dark side, we have cookies
     fold
     file-templates      ; auto-snippets for empty files

     :emacs
     dired               ; making dired pretty [functional]
     undo                ; persistent, smarter undo for your inevitable mistakes

     :term
     eshell              ; the elisp shell that works everywhere

     :checkers
     syntax              ; tasing you for every semicolon you forget

     :tools
     (eval +overlay)     ; run code, run (also, repls)
     lookup              ; navigate your code and its documentation
     magit               ; a git porcelain for Emacs

     :os
     (:if IS-MAC macos)  ; improve compatibility with macOS
     tty                 ; improve the terminal Emacs experience

     ;;(cc                 ; C/C++/Obj-C madness
     ;;+lsp)
     :lang
     emacs-lisp          ; drown in parentheses
     racket
     (org +jira)         ; organize your plain life in plain text
     python              ; beautiful is better than ugly
     sh                  ; she sells {ba,z,fi}sh shells on the C xor
     yaml                ; JSON, but readable
     clojure             ; modern lisp

     :config
     literate
     (default +bindings +smartparens))
#+end_src

#+RESULTS:

* Config

** Config header
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-


;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

#+end_src
** General settings
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Enrico Tolotto"
      user-mail-address "etolotto@gmail.com")

#+end_src

** Fonts config
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
(if (or (eq system-type 'windows-nt)
        (eq system-type 'gnu/linux))
    (setq doom-font (font-spec :family "Hack" :size 16 :weight 'semi-light)
          doom-variable-pitch-font (font-spec :family "sans" :size 14)))

(defun ento/enable-font-windows-server (frame)
    (if (display-graphic-p frame)
        (progn
          (setq doom-font (font-spec :family "Hack" :size 16 :weight 'semi-light)
                doom-variable-pitch-font (font-spec :family "sans" :size 14)))))

(mapc 'ento/enable-font-windows-server (frame-list))
(add-hook 'after-make-frame-functions 'ento/enable-font-windows-server)
#+end_src

** Theme config
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; Spacemacs Themes
;; (setq doom-theme 'spacemacs-dark)
;; Spacegrey
;; (setq doom-theme 'doom-spacegrey)
;;(setq doom-theme 'doom-monokai-pro)
;;(setq doom-theme 'doom-monokai-machine)
;;(setq doom-theme 'doom-Iosvkem)
(setq doom-theme 'doom-opera)

#+end_src
** Doom modeline
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
(use-package! doom-modeline
  :config
  (setq doom-modeline-vcs-max-length 75))
#+end_src

** Magit

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
;; Magit or rather git is extreamlly slow on Windows, the only solution is to use
;; a redefined status-buffer
;; https://emacs.stackexchange.com/questions/19440/magit-extremely-slow-in-windows-how-do-i-optimize
(use-package! magit
  :config
  (if (eq system-type 'windows-nt)
      (progn
        (setq exec-path (add-to-list 'exec-path "C:/Program Files (x86)/Git/bin"))
        (setenv "PATH" (concat "C:\\Program Files (x86)\\Git\\bin;" (getenv "PATH")))
        (setq magit-diff-highlight-hunk-body nil)
        (setq magit-diff-refine-hunk nil)
        (setq magit-diff-highlight-indentation nil)
        (setq magit-diff-highlight-trailing nil)
        (setq magit-diff-paint-whitespace nil)
        (define-derived-mode magit-staging-mode magit-status-mode "Magit staging"
          "Mode for showing staged and unstaged changes."
          :group 'magit-status)
        (defun magit-staging-refresh-buffer ()
          (magit-insert-section (status)
          (magit-insert-untracked-files)
          (magit-insert-unstaged-changes)
          (magit-insert-staged-changes)))
        (defun magit-staging ()
          (interactive)
          (magit-mode-setup #'magit-staging-mode)))))

;; Hooks for vc-next-action
(defun commit-filename ()
"File name to add to the header of a git commit."
  (require 'project)
  (let* ((root (project-root (project-current)))
         (file-name (file-name-sans-extension buffer-file-name))
         (extension (file-name-extension buffer-file-name))
         (final-file-name (mapconcat #'identity
                                     (cl-remove-duplicates (split-string (file-relative-name file-name root))
                                                           :test #'string-equal) ":")))
         (when (or (string-equal extension "c")
                 (string-equal extension "h")
                 (string-equal extension "cpp")
                 (string-equal extension "hpp"))
                (setq final-file-name (format "%s:%s" final-file-name extension)))
         (concat final-file-name ": ")))

(defun insert-preamble (preamble)
"Insert the PREAMBLE (aka filepath:filename) in the git commit."
  (when (equal (buffer-name) "*vc-log*")
                   (insert preamble)))

(defun vc-log-advice (orig-fun &rest args)
  "Advice the 'vc-next-action' function with inser-preamble.
The arguments are ORIG-FUN (vc-next-action) and ARGS the argument
of 'vc-next-action'."
  (let ((preamble (commit-filename)))
    (apply orig-fun args)
    (insert-preamble preamble)))

;; Advicing vc-next-action
(advice-add 'vc-next-action :around #'vc-log-advice)

(map! "<f1>" #'vc-next-action)
(map! "<f14>" #'magit-diff-buffer-file)
(map! "<f15>" #'magit-push-current)
(map! "<f16>" #'(lambda () (interactive) (magit-log-current nil '("-5"))))

(defun git-dired-changes (dir)
  (interactive
   "DDirectory inside a git repository: \n")
  (condition-case nil
      (dired (cons "*git-dired*" (git-status-files dir)))
    (error (message "Execution of git-ls-files failed"))))

(defun git-dired-changes-current ()
  (interactive)
  (condition-case nil
      (dired (cons "*git-dired*" (git-status-files (projectile-project-root))))
    (error (message "Execution of git-ls-files failed"))))

(defun git-status-files (dir)
  (save-excursion
    (cd dir)
    (split-string
     ;; The following is shell-command-to-string with error handling added.
     (with-output-to-string
       (with-current-buffer
           standard-output
         (unless (= 0 (call-process shell-file-name nil t nil
                                    ;; TODO: remove awak an process the string in emacs
                                    shell-command-switch "git status -s --untracked-files=no --ignore-submodules=all | awk '{print $2}'"))
           (error "Not a git repo")))))))

(map! "<f13>" #'git-dired-changes-current)
#+end_src
** Remove Doom configs
For some reason, this takes an incredible ammount of time
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
(advice-remove #'delete-backward-char #'+default--delete-backward-char-a)
#+end_src

** Line number
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)
(setq fill-column 120)

#+end_src

** Org Mode
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
;; add python as a org language
(use-package! org
  :config
  (org-babel-do-load-languages 'org-bable-load-languages '((python. t))))

;; Org auto tangle
;;
(use-package! org-auto-tangle
  :hook (org-mode . org-auto-tangle-mode))
#+end_src

** LSP
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
;; LSP settings
(setq lsp-enable-file-watchers nil)
#+end_src

** CCLS DISABLED
;;#+begin_src emacs-lisp
;; CCLS settings
;;
;;(use-package! ccls
;;  :init
;;  (if (eq system-type 'windows-nt)
;;      (progn (setq ccls-executable "ccls.exe")
;;              (setq ccls-initialization-options
;;                    `(:cache (:directory "C:\\Cache\\")
;;                      :compilationDatabaseDirectory "./build/"
;;                      :clang (:resourceDir "C:\\Program Files\\LLVM\\lib\\clang\\13.0.0\\"))))))
;;#+end_src

** Dired
I have some trouble with the default dired and ~Windows~ that's why for only Windows I use the *dired+* package

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
;; Dired
;; Add dired+ after dired is loaded :-)
(if (eq system-type 'windows-nt)
    (after! dired
      (use-package! rg)
      (use-package! dired+)))

(use-package! dired
 :config
 (setq dired-omit-extensions (cl-set-difference dired-omit-extensions (list ".bin" ".lib" ".dll") :test #'equal)))

(defun ento/run-process-as-admin ()
  "Run the program under the dired cursor as administrator in windows."
  (interactive)
  (if (eq system-type 'windows-nt)
    (let ((executable-name (dired-get-filename t t)))
    (start-process executable-name nil "elevate.exe"  "-c" (concat default-directory executable-name)))
    (message "This action is not supported on your system %s" (symbol-name system-type))))

(map! :after dired-mode
      :map dired-mode-map
      :leader
      "<f1>" #'ento/run-process-as-admin)


(map! :after dired-mode
      :map dired-mode-map
      :leader "y" #'(lambda (x) (car (dired-get-marked-files))))

#+end_src

** Org
*** Auto tangle files
#+begin_src emacs-lisp :tangle ~/.doom.d/packages.el :filename packages.el
;; Org
;; Auto tangle
(package! org-auto-tangle)
#+end_src

** Python
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
;; Python mode
;;
(use-package! python
  :config
  (if (eq system-type 'windows-nt)
      (setq python-shell-interpreter "python")
      (setq python-shell-interpreter "python3"))

  (if (eq system-type 'windows-nt)
      (progn
      (setq doom-modeline-env-python-executable "python")
      (setq flycheck-python-flake8-executable "python")
      (setq flycheck-python-mypy-executable "mypy")
      (setq flycheck-json-python-json-executable "python")
      (setq flycheck-python-pycompile-executable "python")
      (setq flycheck-python-pylint-executable "python")
      (setq flycheck-python-pyright-executable "python"))))
#+end_src

** Projectile or porject module in doom
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
(defun ento/open-project-notes ()
  "Function for opening the project notes."
  (interactive)
  (find-file (+org-capture-project-notes-file)))

(map! :after org-capture
      :map projectile-mode-map
      :leader
      "pn" #'ento/open-project-notes)
#+end_src
** Eshell
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
(defun ento/eshell-no-git-prompt-fn ()
  "Generate the prompt string for eshell. Use for `eshell-prompt-function'."
  (require 'shrink-path)
  (concat (if (bobp) "" "\n")
          (let ((pwd (eshell/pwd)))
            (propertize (if (equal pwd "~")
                            pwd
                          (abbreviate-file-name (shrink-path-file pwd)))
                        'face '+eshell-prompt-pwd))
          (propertize " > " 'face (if (zerop eshell-last-command-status) 'success 'error))
          " "))

(use-package! eshell
  :config
  (setq eshell-prompt-regexp "^.* > ")
  (setq eshell-prompt-function 'ento/eshell-no-git-prompt-fn))
#+end_src
** C++
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
(setq flycheck-global-modes '(not c++-mode cc-mode))
#+end_src
Add microsoft as default style for c++ since is the one we are currently using in dci [[https://www.emacswiki.org/emacs/IndentingC][taken from here]].
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
(setq c-basic-offset 4)
(c-add-style "microsoft"
             '("stroustrup"
               (c-offsets-alist
                (substatement-open . 0)
                (innamespace . +)
                (inline-open . 0)
                (inher-cont . c-lineup-multi-inher)
                (arglist-cont-nonempty . +)
                (template-args-cont . +))))

(setq c-default-style (cons '(c++-mode . "microsoft") c-default-style))
#+end_src
** Bookmarks
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
(use-package! bookmark
  :init
  (setq bookmark-default-file "~/.emacs_bookmarks"))
#+end_src

** Os specific
I don't know why but now chocolatey and cygwin are not picked up from my environment varialbes...
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
(setenv "PATH" (concat (getenv "PATH") ";" "C:\\cygwin64\\bin\\"))
(setenv "PATH" (concat (getenv "PATH") ";" "C:\\ProgramData\\chocolatey\\bin"))
(setq exec-path (split-string (getenv "PATH") ";"))

#+end_src
*** Go
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
(setenv "PATH" (concat (getenv "PATH") ";" "C:\\Program Files\\Go\\bin\\"))
(setq exec-path (split-string (getenv "PATH") ";"))
#+end_src

*** Gaming

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
(defun ento/lunch-gaming-suite ()
  "Function for lunching gaming suite."
  (interactive)
  (start-process "GamingSuite" nil "C:/Git/pc_gaming_suite/Solution/Release/EposGamingSuite.exe"))


(map! "<f3>"
  #'ento/lunch-gaming-suite)

(map! "<f2>"
  #'gaming-kill-gs)
#+end_src

*** Windows
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el

(defun ento/toggle-epos-connect-service ()
    "Toggle EPOS Connect Service on Windows"
    (interactive)
    (shell-command-to-string "powershell.exe -noexit \" & 'C:\\Git\\dci-emacs\\scripts\\stopEC.ps1'\""))

(map! :leader
      :desc "Toggle EPOS Connect service"
      "<f12>" #'ento/toggle-epos-connect-service)

(when (eq system-type 'windows-nt)
  (setq delete-by-moving-to-trash t))
#+end_src

** Working with other applications
*** General terminal for windows
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
(defun ento/open-terminal-in-working-dir ()
    "Open terminal in current working directory"
    (interactive)
    (call-process-shell-command (concat "wt -d " default-directory " C:\\Program Files\\PowerShell\\7\\pwsh.exe") nil 0))

(defun ento/open-cmd-terminal-in-working-dir ()
    "Open terminal in current working directory"
    (interactive)
    (message "%s" default-directory)
    (call-process-shell-command (concat "wt -d " default-directory " cmd.exe") nil 0))

(map! :leader
      "<f8>" #'ento/open-cmd-terminal-in-working-dir)
(map! :leader
      "<f10>" #'ento/open-terminal-in-working-dir)
#+end_src
*** Running skipperlite
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
(defun ento/run-skipperlite-in-working-dir ()
    "Open terminal in current working directory"
    (interactive)
    (call-process-shell-command "wt skipperlite-async.exe -l 5" nil 0))

(map! :leader
      "<f9>" #'ento/run-skipperlite-in-working-dir)
#+end_src

** Remove all the whitespaces after saving
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
(add-hook 'before-save-hook
          'delete-trailing-whitespace)
#+end_src

** File encoding
Set the prefered file encodign to utf-8 in any operating system
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
(prefer-coding-system 'utf-8-unix)
#+end_src
*** Commands on filesystem
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
(defun dos2unix ()
  "Convert a DOS formatted text buffer to UNIX format"
  (interactive)
  (set-buffer-file-coding-system 'undecided-unix nil))

(defun unix2dos ()
  "Convert a UNIX formatted text buffer to DOS format"
  (interactive)
  (set-buffer-file-coding-system 'undecided-dos nil))
#+end_src

** Dci
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
;; Load dci setup
(if (file-exists-p "C:\\Git\\dci-emacs\\dci.el")
    (load "C:\\Git\\dci-emacs\\dci.el"))

;; Load gaming setup
(if (file-exists-p "C:\\Git\\dci-emacs\\gaming.el")
    (load "C:\\Git\\dci-emacs\\gaming.el"))

(if (file-exists-p "C:\\Git\\dci-emacs\\msvc.el")
    (load "C:\\Git\\dci-emacs\\msvc.el"))

(map! :desc "Run kowalski." "<f5>" #'dci-run-kowalski)
(map! :desc "Add dci log." "<f2>" #'dci-new-log-buffer)
#+end_src

** Calc
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
(map! :desc "Run calculator." "<f4>" #'calc)
#+end_src

** Bash shell
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
(defun bash-on-windows-shell ()
  (let ((explicit-shell-file-name "C:/Windows/System32/bash.exe"))
    (shell)))
#+end_src

** RG
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
(defun ento/fast-rg ()
  (interactive)
  (let ((word (if (current-word)
                  (current-word)
                "")))
    (minibuffer-with-setup-hook
        (lambda () (insert word))
      (call-interactively 'ento/fast-rg-impl))))

(defun ento/fast-rg-impl (word)
  "Run rg with the thing at point."
  (interactive "sWord to search: ")
  (rg word "*" default-directory))

(map! :leader
      :nv
      :desc "Toggle EPOS Connect service"
      "r" #'ento/fast-rg)
#+end_src

** Json
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
(defun ento/validate-json ()
  (interactive)
  (let ((string-to-check (sentence-at-point)))

    (condition-case nil
        (progn (json-parse-string string-to-check)
               (message "Valid Json")
               t)
      (message "Not a valid Json")
      (error nil))))
#+end_src
** Elisp
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
(defun ento/add-path-to-load ()
  (interactive)
  (if (not (cl-intersection load-path (list default-directory)))
      (setq load-path (cons default-directory load-path))
    (message "Current path already present in the load-path")))
#+end_src

** Buffers
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
(map! "C-x C-b" #'ibuffer)
#+end_src
