#+TITLE: Doom Config
#+auto_tangle: t

* Packages
#+begin_src emacs-lisp :tangle ~/.doom.d/packages.el :filename packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;(package! some-package)

;; Groovy
(package! groovy-mode)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;(package! builtin-package :pin "1a2b3c4d5e")


;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;(unpin! pinned-package)
;; ...or multiple packages
;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;(unpin! t)
(package! org-fancy-priorities)
(package! spacemacs-theme)
(package! dired+)
#+end_src
* Init
#+begin_src emacs-lisp :tangle ~/.doom.d/init.el :filename init.el
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

(doom! :input
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company             ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ivy                 ; a search engine for love and life

       :ui
       ;;deft              ; notational velocity for Emacs
       doom                ; what makes DOOM look the way it does
       doom-dashboard      ; a nifty splash screen for Emacs
       ;; doom-quit        ; DOOM quit-message prompts when you quit Emacs
       ;;(emoji +unicode)  ; ðŸ™‚
       ;;fill-column       ; a `fill-column' indicator
       hl-todo             ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;;indent-guides     ; highlighted indent columns
       ;;ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline            ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints             ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       treemacs            ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       vc-gutter           ; vcs diff in the fringe
       vi-tilde-fringe     ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       workspaces          ; tab emulation, persistence & separate workspaces
       zen                 ; distraction-free coding or writing

       :editor
       (evil +everywhere)  ; come to the dark side, we have cookies
       file-templates      ; auto-snippets for empty files
       fold                ; (nigh) universal code folding
       ;;(format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets            ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired               ; making dired pretty [functional]
       electric            ; smarter, keyword-based electric-indent
       ;;ibuffer           ; interactive buffer management
       undo                ; persistent, smarter undo for your inevitable mistakes
       vc                  ; version-control and Emacs, sitting in a tree

       :term
       eshell              ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm               ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       spell               ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       lsp
       magit               ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       ;;pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       tty                 ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       (cc                 ; C/C++/Obj-C madness
        +lsp)
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp          ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(haskell +dante)  ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       ;;json              ; At least it ain't XML
       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
       ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean
       ;;factor
       ;;ledger            ; an accounting system in Emacs
       ;;lua               ; one-based indices? one-based indices
       markdown            ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org
        +jira
        +roam)             ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       plantuml            ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       ;;python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       scala               ; java, but good
       ;;scheme            ; a fully conniving family of lisps
       sh                  ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;web               ; the tubes
       yaml                ; JSON, but readable

       :email
       ;;(mu4e +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;irc               ; how neckbeards socialize
       (rss +org)          ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       literate
       (default +bindings +smartparens))
#+end_src
* Config
** Config header
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-


;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

#+end_src
** General settings
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Enrico Tolotto"
      user-mail-address "etolotto@gmail.com")

#+end_src

** Fonts config
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
(if (or (eq system-type 'windows-nt)
        (eq system-type 'gnu/linux))
    (setq doom-font (font-spec :family "Hack" :size 16 :weight 'semi-light)
          doom-variable-pitch-font (font-spec :family "sans" :size 14)))
#+end_src

** Theme config
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; Spacemacs Themes
;; (setq doom-theme 'spacemacs-dark)
(setq doom-theme 'doom-spacegrey)
#+end_src

** Org Roam directory config
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
;;
(if (eq system-type 'windows-nt)
    (if (file-exists-p "W:/home/ento/Dropbox/org/")
        (progn (setq org-roam-directory "W:/home/ento/Dropbox/org/roam/")
            (setq org-directory "W:/home/ento/Dropbox/org/"))
      (make-directory "~/Documents/org" t)
      (make-directory "~/Documents/org/roam" t)
      (setq org-roam-directory "~/Documents/org/roam")
      (setq org-directory "~/Documents/org"))
    (setq org-roam-directory "~/org/roam/")
    (setq org-directory "~/org/"))

#+end_src
** Magit

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
;; Magit or rather git is extreamlly slow on Windows, the only solution is to use
;; a redefined status-buffer
;; https://emacs.stackexchange.com/questions/19440/magit-extremely-slow-in-windows-how-do-i-optimize
(use-package! magit
  :config
  (if (eq system-type 'windows-nt)
      (progn
        (setq exec-path (add-to-list 'exec-path "C:/Program Files (x86)/Git/bin"))
        (setenv "PATH" (concat "C:\\Program Files (x86)\\Git\\bin;" (getenv "PATH")))
        (define-derived-mode magit-staging-mode magit-status-mode "Magit staging"
          "Mode for showing staged and unstaged changes."
          :group 'magit-status)
        (defun magit-staging-refresh-buffer ()
          (magit-insert-section (status)
          (magit-insert-untracked-files)
          (magit-insert-unstaged-changes)
          (magit-insert-staged-changes)))
        (defun magit-staging ()
          (interactive)
          (magit-mode-setup #'magit-staging-mode)))))

#+end_src
** Line number
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)
(setq fill-column 120)

#+end_src

** Org Mode
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
;; Orgmode
;;
(setq org-agenda-files '("~/org/thesis.org"))
(use-package! org-fancy-priorities
  :hook (org-mode . org-fancy-priorities-mode)
  :config (setq org-fancy-priorities-list '("âš¡" "â¬†" "â¬‡" "â˜•")))

;; add python as a org language
(use-package! org
  :config
  (org-babel-do-load-languages 'org-bable-load-languages '((python. t))))

;; Org auto tangle
;;
(use-package! org-auto-tangle
  :hook (org-mode . org-auto-tangle-mode))
#+end_src

** PlantUml
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
;; PlantUml
;;
(use-package! plantuml-mode
  :after org
  :config
  (setq plantuml-default-exec-mode 'jar)
  (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
  (org-babel-do-load-languages 'org-babel-load-languages '((plantuml . t))))

#+end_src
** LSP
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
;; LSP settings
(setq lsp-enable-file-watchers t)
#+end_src

** CCLS
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
;; CCLS settings
;;
(use-package! ccls
  :init
  (if (eq system-type 'windows-nt)
      (progn (setq ccls-executable "ccls.exe")
              (setq ccls-initialization-options
                    `(:cache (:directory "..\\ccls-cache"))))))
#+end_src
** Splash Image
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
;; Splash Image
(setq fancy-splash-image nil)
#+end_src

** Dired
I h ave some trouble with the default dired and ~Windows~ that's why for only Windows I use the *dired+* package

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
;; Dired
;; Add dired+ after dired is loaded :-)
(if (eq system-type 'windows-nt)
    (after! dired
      (use-package! dired+)))
#+end_src

** Extra pacakges
*** Java-CC mode
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
;; JavaCC mode
;;
(add-to-list 'auto-mode-alist '("\\.jj\\'" . javacc-mode))
(add-to-list 'auto-mode-alist '("\\.jjt\\'" . javacc-mode))

;; Add the externals directory to the load path
(add-load-path! (concat doom-private-dir "externals/"))

(use-package! javacc-mode
  :load-path "externals/javacc-mode.el"
  :init
  (add-to-list 'auto-mode-alist '("\\.jj\\'" . javacc-mode))
  (add-to-list 'auto-mode-alist '("\\.jjt\\'" . javacc-mode)))
#+end_src

#+begin_src emacs-lisp :tangle ~/.doom.d/externals/javacc-mode.el :filename javacc-mode.el :mkdirp yes
;;; javacc-mode.el --- A major mode for editing javacc and jjtree files.
;;* ----------------------------------------------------------------------------
;;* "THE BEER-WARE LICENSE" (Revision 42):
;;* <bwaite@connect.carleton.ca> wrote this file.
;;* As long as you retain this notice you can do whatever you want with this
;;* stuff. If we meet some day, and you think this stuff is worth it, you can
;;* buy me a beer in return.
;;*                                                               -Bryan Waite
;;* (lovingly stolen from the original Beer-ware license by Poul-Henning Kamp)
;;* ----------------------------------------------------------------------------
;;
;;;;Note that this has only been tested with GNU Emacs 22.1 but I assume it
;;;;will work with any version that has java-mode
;;;;Last updated Mon 25 Feb 2008 11:00:22 PM EST
(defconst javacc-mode-version "0.1")
(defconst javacc-author-name  "Bryan Waite")
(defconst javacc-author-email "bwaite@connect.carleton.ca")
(defconst javacc-web-page     "www.thesiteiwillonedayhave.com")

;; To use java-font-lock-keywords, we need to require its mode first
(eval-when-compile
  (require 'cc-mode))

;;this is pretty much all I'm adding
(defconst javacc-keyword-re
  (regexp-opt '("DEBUG_PARSER" "DEBUG_LOOKAHEAD" "DEBUG_TOKEN_MANAGER"
                 "COMMON_TOKEN_ACTION" "IGNORE_CASE" "CHOICE_AMBIGUITY_CHECK"
                 "OTHER_AMBIGUITY_CHECK" "STATIC LOOKAHEAD" "ERROR_REPORTING"
                 "USER_TOKEN_MANAGER"  "USER_CHAR_STREAM" "JAVA_UNICODE_ESCAPE"
                 "UNICODE_INPUT" "LOOKAHEAD" "STATIC" "BUILD_PARSER"
                 "BUILD_TOKEN_MANAGER" "SANITY_CHECK" "FORCE_LA_CHECK"
                 "PARSER_BEGIN" "PARSER_END"
                 "TOKEN" "SKIP" "MORE" "SPECIAL_TOKEN"
                 "DEBUG" "IGNORE_IN_BNF" "MULTI" "NODE_DEFAULT_VOID"
                 "NODE_EXTENDS" "VISITOR" "options") 'words))

;;;add new words to the java keywords (TOKEN shows up the wrong colour)
(defvar javacc-font-lock-keywords
  (append java-font-lock-keywords
          (list (list javacc-keyword-re 1 font-lock-keyword-face)))
  "Default highlighting expressions for JAVACC mode")

;;;do the deriving
(define-derived-mode javacc-mode java-mode "JavaCC"
   "A major mode for editing javacc and jjtree files."
   (set (make-local-variable 'font-lock-defaults)
 	'(javacc-font-lock-keywords)))

(provide 'javacc-mode)

;;; Also, some smart-compile entries to add to smart-compile-alist
;;;   ("\\.jj\\'" . "javacc %f")
;;;   ("\\.jjt\\'" . "jjtree %f")

#+end_src
** Splash screen
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
(defvar fancy-splash-image-template
  (expand-file-name "imgs/emacs-e-template.svg" doom-private-dir)
  "Default template svg used for the splash image, with substitutions from ")

(defvar fancy-splash-sizes
  `((:height 300 :min-height 50 :padding (0 . 2))
    (:height 250 :min-height 42 :padding (2 . 4))
    (:height 200 :min-height 35 :padding (3 . 3))
    (:height 150 :min-height 28 :padding (3 . 3))
    (:height 100 :min-height 20 :padding (2 . 2))
    (:height 75  :min-height 15 :padding (2 . 1))
    (:height 50  :min-height 10 :padding (1 . 0))
    (:height 1   :min-height 0  :padding (0 . 0)))
  "list of plists with the following properties
  :height the height of the image
  :min-height minimum `frame-height' for image
  :padding `+doom-dashboard-banner-padding' (top . bottom) to apply
  :template non-default template file
  :file file to use instead of template")

(defvar fancy-splash-template-colours
  '(("$colour1" . keywords) ("$colour2" . type) ("$colour3" . base5) ("$colour4" . base8))
  "list of colour-replacement alists of the form (\"$placeholder\" . 'theme-colour) which applied the template")

(unless (file-exists-p (expand-file-name "theme-splashes" doom-cache-dir))
  (make-directory (expand-file-name "theme-splashes" doom-cache-dir) t))

(defun fancy-splash-filename (theme-name height)
  (expand-file-name (concat (file-name-as-directory "theme-splashes")
                            theme-name
                            "-" (number-to-string height) ".svg")
                    doom-cache-dir))

(defun fancy-splash-clear-cache ()
  "Delete all cached fancy splash images"
  (interactive)
  (delete-directory (expand-file-name "theme-splashes" doom-cache-dir) t)
  (message "Cache cleared!"))

(defun fancy-splash-generate-image (template height)
  "Read TEMPLATE and create an image if HEIGHT with colour substitutions as
   described by `fancy-splash-template-colours' for the current theme"
  (with-temp-buffer
    (insert-file-contents template)
    (re-search-forward "$height" nil t)
    (replace-match (number-to-string height) nil nil)
     (dolist (substitution fancy-splash-template-colours)
       (goto-char (point-min))
       (while (re-search-forward (car substitution) nil t)
         (replace-match (doom-color (cdr substitution)) nil nil)))
    (write-region nil nil
                  (fancy-splash-filename (symbol-name doom-theme) height) nil nil)))

(defun fancy-splash-generate-images ()
  "Perform `fancy-splash-generate-image' in bulk"
  (dolist (size fancy-splash-sizes)
    (unless (plist-get size :file)
      (fancy-splash-generate-image (or (plist-get size :template)
                                       fancy-splash-image-template)
                                   (plist-get size :height)))))

(defun ensure-theme-splash-images-exist (&optional height)
  (unless (file-exists-p (fancy-splash-filename
                          (symbol-name doom-theme)
                          (or height
                              (plist-get (car fancy-splash-sizes) :height))))
    (fancy-splash-generate-images)))

(defun get-appropriate-splash ()
  (let ((height (frame-height)))
    (cl-some (lambda (size) (when (>= height (plist-get size :min-height)) size))
             fancy-splash-sizes)))

(setq fancy-splash-last-size nil)
(setq fancy-splash-last-theme nil)
(defun set-appropriate-splash (&rest _)
  (let ((appropriate-image (get-appropriate-splash)))
    (unless (and (equal appropriate-image fancy-splash-last-size)
                 (equal doom-theme fancy-splash-last-theme)))
    (unless (plist-get appropriate-image :file)
      (ensure-theme-splash-images-exist (plist-get appropriate-image :height)))
    (setq fancy-splash-image
          (or (plist-get appropriate-image :file)
              (fancy-splash-filename (symbol-name doom-theme) (plist-get appropriate-image :height))))
    (setq +doom-dashboard-banner-padding (plist-get appropriate-image :padding))
    (setq fancy-splash-last-size appropriate-image)
    (setq fancy-splash-last-theme doom-theme)
    (+doom-dashboard-reload)))

(add-hook 'window-size-change-functions #'set-appropriate-splash)
(add-hook 'doom-load-theme-hook #'set-appropriate-splash)
#+end_src

** Nice quotes on the spalsh screen
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
(defvar phrase-api-url
  (nth (random 3)
       '(("https://corporatebs-generator.sameerkumar.website/" :phrase)
         ("https://useless-facts.sameerkumar.website/api" :data)
         ("https://dev-excuses-api.herokuapp.com/" :text))))

(defmacro phrase-generate-callback (token &optional format-fn ignore-read-only callback buffer-name)
  `(lambda (status)
     (unless (plist-get status :error)
       (goto-char url-http-end-of-headers)
       (let ((phrase (plist-get (json-parse-buffer :object-type 'plist) (cadr phrase-api-url)))
             (inhibit-read-only ,(when (eval ignore-read-only) t)))
         (setq phrase-last (cons phrase (float-time)))
         (with-current-buffer ,(or (eval buffer-name) (buffer-name (current-buffer)))
           (save-excursion
             (goto-char (point-min))
             (when (search-forward ,token nil t)
               (with-silent-modifications
                 (replace-match "")
                 (insert ,(if format-fn format-fn 'phrase)))))
           ,callback)))))

(defvar phrase-last nil)
(defvar phrase-timeout 5)

(defmacro phrase-insert-async (&optional format-fn token ignore-read-only callback buffer-name)
  `(let ((inhibit-message t))
     (if (and phrase-last
              (> phrase-timeout (- (float-time) (cdr phrase-last))))
         (let ((phrase (car phrase-last)))
           ,(if format-fn format-fn 'phrase))
       (url-retrieve (car phrase-api-url)
                     (phrase-generate-callback ,(or token "\ufeff") ,format-fn ,ignore-read-only ,callback ,buffer-name))
       ;; For reference, \ufeff = Zero-width no-break space / BOM
       ,(or token "\ufeff"))))

(defun doom-dashboard-phrase ()
  (phrase-insert-async
   (progn
     (setq-local phrase-position (point))
     (mapconcat
      (lambda (line)
        (+doom-dashboard--center
         +doom-dashboard--width
         (with-temp-buffer
           (insert-text-button
            line
            'action
            (lambda (_)
              (setq phrase-last nil)
              (+doom-dashboard-reload t))
            'face 'doom-dashboard-menu-title
            'mouse-face 'doom-dashboard-menu-title
            'help-echo "Random phrase"
            'follow-link t)
           (buffer-string))))
      (split-string
       (with-temp-buffer
         (insert phrase)
         (setq fill-column (min 70 (/ (* 2 (window-width)) 3)))
         (fill-region (point-min) (point-max))
         (buffer-string))
       "\n")
      "\n"))
   nil t
   (progn
     (goto-char phrase-position)
     (forward-whitespace 1))
   +doom-dashboard-name))

(defadvice! doom-dashboard-widget-loaded-with-phrase ()
  :override #'doom-dashboard-widget-loaded
  (setq line-spacing 0.2)
  (insert
   "\n\n"
   (propertize
    (+doom-dashboard--center
     +doom-dashboard--width
     (doom-display-benchmark-h 'return))
    'face 'doom-dashboard-loaded)
   "\n"
   (doom-dashboard-phrase)
   "\n"))
#+end_src

** Ascii dashboard

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
(defun doom-dashboard-draw-ascii-emacs-banner-fn ()
  (let* ((banner
          '(",---.,-.-.,---.,---.,---."
            "|---'| | |,---||    `---."
            "`---'` ' '`---^`---'`---'"))
         (longest-line (apply #'max (mapcar #'length banner))))
    (put-text-property
     (point)
     (dolist (line banner (point))
       (insert (+doom-dashboard--center
                +doom-dashboard--width
                (concat
                 line (make-string (max 0 (- longest-line (length line)))
                                   32)))
               "\n"))
     'face 'doom-dashboard-banner)))

(unless (display-graphic-p) ; for some reason this messes up the graphical splash screen atm
  (setq +doom-dashboard-ascii-banner-fn #'doom-dashboard-draw-ascii-emacs-banner-fn))
#+end_src

** Simplify the dashboard
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)
(add-hook! '+doom-dashboard-mode-hook (hide-mode-line-mode 1) (hl-line-mode -1))
(setq-hook! '+doom-dashboard-mode-hook evil-normal-state-cursor (list nil))
#+end_src

** Org
*** Auto tangle files
#+begin_src emacs-lisp :tangle ~/.doom.d/packages.el :filename packages.el
;; Org
;; Auto tangle
(package! org-auto-tangle)
#+end_src

** Scala
Add command for cmpiling scala code :-)
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
;; Sbt
;;
(map! :after scala-mode
      :map scala-mode-map
      :localleader
      :nv "mc" #'sbt-command)
#+end_src
Help sbt-mode to find the root of the scala project :-)
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
;; Scala
(defun ento/update-sbt-project-root ()
  "Update the project root directory for sbt"
  (interactive)
  (setq sbt:buffer-project-root (projectile-project-root)))

(use-package! scala-mode
  :hook
  (lambda () (ento/update-sbt-project-root)))
#+end_src
** Sbt
Since I have a Mac M1 I need a newer version of sbt grather then 1.5.0
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
;; Sbt
;;
(map! :after javacc-mode
      :map javacc-mode-map
      :localleader
      :nv "mc" #'sbt-command)

(use-package! sbt-mode
  :hook
  (lambda () (ento/update-sbt-project-root))
  :config
  ;; Make sbt a popup buffer
  (set-popup-rule! "^\*sbt\*" :size 0.25 :vslot -4 :select t :quit nil :ttl 0)
  (add-to-list 'sbt:program-options "-Dsbt.version=1.5.0")
  ;; overload function until I don't find a better alternative :-
  (defun sbt-command (command &optional focus)
    (interactive
    (progn
        (setq sbt:command-history-temp
            (ignore-errors (with-current-buffer (sbt:buffer-name) (ring-elements comint-input-ring))))

        (list (completing-read (format "Command to run (default %s): " (sbt:get-previous-command))      '("javacc; test" "javacc" "test")))))
    (sbt:command command focus)
    (with-current-buffer (sbt:buffer-name)
        (setq sbt:previous-command command))))
#+end_src

** Python
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el :filename config.el
;; Python mode
;;
(use-package! python
  :config
  (if (eq system-type 'windows-nt)
      (setq python-shell-interpreter "python")
      (setq python-shell-interpreter "python3"))

  (if (eq system-type 'windows-nt)
      (progn
      (setq doom-modeline-env-python-executable "python")
      (setq flycheck-python-flake8-executable "python")
      (setq flycheck-python-mypy-executable "python")
      (setq flycheck-json-python-json-executable "python")
      (setq flycheck-python-pycompile-executable "python")
      (setq flycheck-python-pylint-executable "python")
      (setq flycheck-python-pyright-executable "python"))))
#+end_src
